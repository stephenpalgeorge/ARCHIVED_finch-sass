
@use 'sass:map';
@use '../config';
@use '../layout';

/// ----------
/// MODULE SETUP
/// ----------
/// These are some high level settings that the rest of the typography module depends on:
$use-web-safe: false !default;
/// @author stephen pal-george
/// This map controls whether the styles are generated specifically for each breakpoint.
/// If true, then placeholders and classes such as `(\.|%)sm\:size--lead` will be created.
$font-responsive: (
  font-family: false,
  font-size: false,
  font-variant: false,
  font-weight: false,
  line-height: false,
  letter-spacing: false,
  text-align: false,
  text-decoration: false,
  text-indent: false,
  text-transform: false,
  word-spacing: false,
);
/// provide custom 'responsive' settings for this module.
/// @example @use '<path-to-finch>/typography' with ($set-responsive: (font-size: true));
$set-responsive: () !default;
$responsive: map.merge($font-responsive, $set-responsive);

/// @author stephen pal-george
/// This map controls whether or not utility classes are generated. By default,
/// Finch will create everything within it's module's partials as placeholders (%),
/// rather than classes (.). Switching any of these values to `true` will create the
/// classes as well.
$font-utilities: (
  font-family: false,
  font-size: false,
  font-variant: false,
  font-weight: false,
  line-height: false,
  letter-spacing: false,
  text-align: false,
  text-decoration: false,
  text-indent: false,
  text-transform: false,
  word-spacing: false,
);
/// provide custom 'utilities' settings for this module.
/// @example @use '<path-to-finch>/typography' with ($set-utilities: (font-weight: true));
$set-utilities: () !default;
$utilities: map.merge($font-utilities, $set-utilities);

/// MODULE CONFIG
/// ----------
/// These are the variables that the module can be `@used` with, to customise the compiled CSS output.
/// @example @use '<path-to-finch>/typography' with ($font-sizes: (big: 5rem));
/// @example @use '<path-to-finch>/typography' with ($line-heights: (double: 2));
$font-sizes: () !default;
$font-families: () !default;
$font-weights: () !default;
$letter-spacings: () !default;
$line-heights: () !default;
$text-decoration-thicknesses: () !default;
$text-indents: () !default;
$word-spacings: () !default;

/// FONT-FAMILIES
/// ----------
@forward 'properties/font-families' with (
  $set-font-families: $font-families,
  $font-family-utils: map.get($utilities, font-family),
  $prefer-web-safe: $use-web-safe,
);

/// FONT-SIZE
/// ----------
@forward 'properties/font-sizes' with (
  $set-font-sizes: $font-sizes,
  $size-utils: map.get($utilities, font-size),
);

/// FONT-VARIANT
/// ----------
@forward 'properties/font-variant' with (
  $font-variant-utils: map.get($utilities, font-variant),
);

/// FONT-WEIGHT
/// ----------
@forward 'properties/font-weights' with (
  $set-font-weights: $font-weights,
  $weight-utils: map.get($utilities, font-weight),
);


/// LETTER-SPACING
/// ----------
@forward 'properties/letter-spacings' with (
  $set-letter-spacings: $letter-spacings,
  $letter-spacing-utils: map.get($utilities, letter-spacing),
);

/// LINE-HEIGHT
/// ----------
@forward 'properties/line-heights' with (
  $set-line-heights: $line-heights,
  $line-height-utils: map.get($utilities, line-height),
);

/// TEXT-ALIGN
/// ----------
@forward 'properties/text-align' with (
  $text-align-utils: map.get($utilities, text-align),
);

/// TEXT-DECORATION
/// ----------
@forward 'properties/text-decoration' with (
  $text-decoration-utils: map.get($utilities, text-decoration),
  $set-decoration-thicknesses: $text-decoration-thicknesses,
);

/// TEXT-INDENT
/// ----------
@forward 'properties/text-indent' with (
  $set-text-indents: $text-indents,
  $text-indent-utils: map.get($utilities, text-indent),
);

/// TEXT-TRANSFORM
/// ----------
@forward 'properties/text-transform' with (
  $text-transform-utils: map.get($utilities, text-transform),
);

/// WORD-SPACING
/// ----------
@forward 'properties/word-spacings' with (
  $set-word-spacings: $word-spacings,
  $word-spacing-utils: map.get($utilities, word-spacing),
);

/// LOAD THE PROPERTIES
/// ----------
/// We use the property files within the module itself, to generate responsive classes,
/// and as part of the composition of some top-level mixins, we therefore load them all in here:
@use '../_mixins' as m with ($responsive-map: $responsive, $utilities-map: $utilities);
@use 'properties/font-families' as *;
@use 'properties/font-sizes' as *;
@use 'properties/font-variant' as *;
@use 'properties/font-weights' as *;
@use 'properties/letter-spacings' as *;
@use 'properties/line-heights' as *;
@use 'properties/text-align' as *;
@use 'properties/text-indent' as *;
@use 'properties/text-transform' as *;
@use 'properties/word-spacings' as *;

/// GENERATE RESPONSIVE CLASS NAMES
/// ----------
/// the following code generates classes such as `sm:size--lead`, or `xl:weight--heavy`.
/// the classes will only be generated if the corresponding property is set to 'true' in
/// the $font-responsive and $font-utilities maps.
@each $key, $value in layout.$breakpoints {
  @include layout.break($key) {
    @include m.gen-responsive($key, 'font-family', 'font', $families);
    @include m.gen-responsive($key, 'font-size', 'size', $sizes);
    @include m.gen-responsive($key, 'font-weight', 'weight', $weights);
    @include m.gen-responsive($key, 'font-variant', 'variant', $variants);
    @include m.gen-responsive($key, 'line-height', 'line-height', $heights);
    @include m.gen-responsive($key, 'letter-spacing', 'letter-spacing', $l-spacings);
    @include m.gen-responsive($key, 'text-align', 'text-align', $alignments);
    @include m.gen-responsive($key, 'text-indent', 'indent', $indents);
    @include m.gen-responsive($key, 'text-transform', 'text-transform', $transforms);
    @include m.gen-responsive($key, 'word-spacing', 'word-spacing', $w-spacings);
  }
}

/// DEFINE MODULE-LEVEL MIXINS
/// ----------
/// These mixins combine behaviour of several/many of the different properties that have been defined so far.

/// TEXT STYLE
@mixin text-style(
  $alignment: start,
  $indent: none,
  $family: sans-serif,
  $letter-spacing: base,
  $line-height: base,
  $size: base,
  $transform: none,
  $weight: base,
  $word-spacing: base,
  $optimise: false,
) {
  font-family: font-family($family);
  font-size: size($size);
  font-weight: weight($weight);
  letter-spacing: letter-spacing($letter-spacing);
  line-height: line-height($line-height);
  text-align: $alignment;
  text-indent: indent($indent);
  text-transform: $transform;
  word-spacing: word-spacing($word-spacing);
  // set some recommended values that aren't browser defaults.
  // In some cases, these won't have any affect as they are not well supported,
  // and the end-user can always override them in their stylesheets anyway...
  @if $optimise {
    font-kerning: normal;
    overflow-wrap: break-word;
  }
}

.text-body {
  @include text-style($line-height: tall);
  max-width: 70ch;
}

.text-lead {
  @include text-style($size: lead, $weight: x-light);
  // this next line is just here for demo purposes, this kind of thing should live in the layout module
  max-width: 62ch;
}

.text-subheading {
  @include text-style($family: serif, $size: sub-heading, $line-height: tight);
}

.text-heading {
  @include text-style($family: serif, $size: heading, $line-height: tight, $weight: heavy);
}

// ALL OF THIS FOLLOWING CODE SHOULD ONE DAY LIVE IN AN 'Elements' MODULE, it's here for now
// as a proof of concept/demo kind of thing.
h1 {
  @extend .text-heading;
  // this next line is just here for demo purposes, this kind of thing should live in the layout module
  max-width: 15ch;
}

h2, h3 {
  @extend .text-subheading;
  font-weight: weight(heavy);
  // this next line is just here for demo purposes, this kind of thing should live in the layout module
  max-width: 25ch;
}
h3 {
  font-weight: weight(base);
}

p:not([class]) {
  @extend .text-body;
}

