@use 'sass:map';
@use '../config';
@use '../layout';

/// ----------
/// MODULE SETUP
/// ----------

/// @author stephen pal-george
/// This map controls whether the styles are generated specifically for each breakpoint.
/// If true, then placeholders and classes such as `(\.|%)sm\:size--lead` will be created.
$font-responsive: (
  font-size: false,
  font-weight: false,
  line-height: false,
  letter-spacing: false,
  word-spacing: false,
);
/// provide custom 'responsive' settings for this module.
/// @example @use '<path-to-finch>/typography' with ($set-responsive: (font-size: true));
$set-responsive: () !default;
$responsive: map.merge($font-responsive, $set-responsive);

/// @author stephen pal-george
/// This map controls whether or not utility classes are generated. By default,
/// Finch will create everything within it's module's partials as placeholders (%),
/// rather than classes (.). Switching any of these values to `true` will create the
/// classes as well.
$font-utilities: (
  font-size: false,
  font-weight: false,
  line-height: false,
  letter-spacing: false,
  word-spacing: false,
);
/// provide custom 'utilities' settings for this module.
/// @example @use '<path-to-finch>/typography' with ($set-utilities: (font-weight: true));
$set-utilities: () !default;
$utilities: map.merge($font-utilities, $set-utilities);
  
@use '../_mixins' as m with ($responsive-map: $responsive, $utilities-map: $utilities);

/// FONT-SIZE
/// ----------
/// provide custom font-sizes for the module, these are consumed by the _sizes partial.
/// @example @use '<path-to-finch>/typography' with ($font-sizes: (headline: 5rem));
$font-sizes: () !default;
@use 'font-sizes' as * with (
  $set-font-sizes: $font-sizes,
  $size-utils: map.get($utilities, font-size),
);

/// FONT-WEIGHT
/// ----------
/// provide custom font-weights for the module, these are consumed by the _weights partial.
/// @example @use '<path-to-finch>/typography' with ($font-weights: (heavy: 800));
$font-weights: () !default;
@use 'font-weights' as * with (
  $set-font-weights: $font-weights,
  $weight-utils: map.get($utilities, font-weight),
);

/// LETTER-SPACING
/// ----------
/// provide custom letter-spacings for the module, these are consumed by the _letter-spacings partial.
/// @example @use '<path-to-finch>/typography' with ($letter-spacings: (x-wide: .25rem));
$letter-spacings: () !default;
@use 'letter-spacings' as * with (
  $set-letter-spacings: $letter-spacings,
  $letter-spacing-utils: map.get($utilities, letter-spacing),
);

/// LINE-HEIGHT
/// ----------
/// provide custom line-heights for the module, these are consumed by the _line-heights partial.
/// @example @use '<path-to-finch>/typography' with ($line-heights: (x-tall: 2));
$line-heights: () !default;
@use 'line-heights' as * with (
  $set-line-heights: $line-heights,
  $line-height-utils: map.get($utilities, line-height),
);

/// WORD-SPACING
/// ----------
/// provide custom word-spacings for the module, these are consumed by the _word-spacings partial.
/// @example @use '<path-to-finch>/typography' with ($word-spacings: (stretch: 1px));
$word-spacings: () !default;
@use 'word-spacings' as * with (
  $set-word-spacings: $word-spacings,
  $word-spacing-utils: map.get($utilities, word-spacing),
);

// create responsize class names:
// the following code generates classes such as `sm:size--lead`, or `xl:weight--heavy`.
// the classes will only be generated if the corresponding property is set to 'true' in
// the $font-responsive and $font-utilities maps.
@each $key, $value in layout.$breakpoints {
  @include layout.break($key) {
    @include m.gen-responsive($key, 'font-size', 'size', $sizes);
    @include m.gen-responsive($key, 'font-weight', 'weight', $weights);
    @include m.gen-responsive($key, 'line-height', 'line-height', $heights);
    @include m.gen-responsive($key, 'letter-spacing', 'letter-spacing', $l-spacings);
    @include m.gen-responsive($key, 'word-spacing', 'word-spacing', $w-spacings);
  }
}

@mixin text-style($weight: base, $size: base, $line-height: base, $letter-spacing: base, $word-spacing: base) {
  font-weight: weight($weight);
  font-size: size($size);
  line-height: line-height($line-height);
  letter-spacing: letter-spacing($letter-spacing);
  word-spacing: word-spacing($word-spacing);
  // set some recommended values that aren't browser defaults
  // in some cases, these won't be rendered as they are not well supported,
  // and the end-user can always override them in their stylesheets anyway...
  word-break: break-all;
  hyphens: manual;
  font-kerning: normal;
}

.text-main {
  @include text-style($size: small, $letter-spacing: tight, $word-spacing: wide);
}
