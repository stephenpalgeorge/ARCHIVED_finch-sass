@use 'sass:map';
@use '../config';

/// ----------
/// MODULE SETUP
/// ----------
/// These are some high level settings that the rest of the typography module depends on:
$use-web-safe: false !default;
/// This map controls whether the styles are generated specifically for each breakpoint.
/// If true, then placeholders and classes such as `.font-size:lead@lg` will be created.
/// `text-decoration` is deliberately omitted from this map as there are too many variables to make
/// utility classes practical/useful.
$font-responsive: (
  font-family: false,
  font-size: false,
  font-style: false,
  font-variant: false,
  font-weight: false,
  line-height: false,
  letter-spacing: false,
  text-align: false,
  text-indent: false,
  text-transform: false,
  word-spacing: false,
);
/// provide custom 'responsive' settings for this module.
/// @example @use '<path-to-finch>/typography' with ($set-responsive: (font-size: true));
$set-responsive: () !default;
$responsive: map.merge($font-responsive, $set-responsive);

/// This map controls whether or not utility classes are generated. By default,
/// Finch will not create any class names. Switching any of these values to `true`
/// will create the classes for that property.
/// `text-decoration` is deliberately omitted from this map as there are too many variables to make
/// utility classes practical/useful.
$font-utilities: (
  font-family: false,
  font-size: true,
  font-style: false,
  font-variant: false,
  font-weight: false,
  line-height: false,
  letter-spacing: false,
  text-align: false,
  text-indent: false,
  text-transform: false,
  word-spacing: false,
);
/// provide custom 'utilities' settings for this module.
/// @example @use '<path-to-finch>/typography' with ($set-utilities: (font-weight: true));
$set-utilities: () !default;
$utilities: map.merge($font-utilities, $set-utilities);

/// MODULE CONFIG
/// ----------
/// These are the variables that the module can be `@used` with, to customise the compiled CSS output.
/// @example @use '<path-to-finch>/typography' with ($font-sizes: (big: 5rem));
/// @example @use '<path-to-finch>/typography' with ($line-heights: (double: 2));
$font-families: () !default;
$font-sizes: () !default;
$font-weights: () !default;
$letter-spacings: () !default;
$line-heights: () !default;
$text-decoration-thicknesses: () !default;
$text-indents: () !default;
$word-spacings: () !default;

/// FORWARD THE PROPERTIES
/// ----------
/// We pass along the property files with the custom configuration where appropriate.
@forward 'properties/font-families' with (
  $set-font-families: $font-families,
  $prefer-web-safe: $use-web-safe,
);
@forward 'properties/font-sizes' with ($set-font-sizes: $font-sizes);
@forward 'properties/font-weights' with ($set-font-weights: $font-weights);
@forward 'properties/letter-spacings' with ($set-letter-spacings: $letter-spacings);
@forward 'properties/line-heights' with ($set-line-heights: $line-heights);
@forward 'properties/text-decorations';
@forward 'properties/text-indents' with ($set-text-indents: $text-indents);
@forward 'properties/word-spacings' with ($set-word-spacings: $word-spacings);

/// LOAD THE PROPERTIES
/// ----------
/// We use the property files within the module itself, to generate responsive classes,
/// and as part of the composition of some top-level mixins, we therefore load them all in here:
@use '../_mixins' as m;
@use 'properties/font-families' as *;
@use 'properties/font-sizes' as *;
@use 'properties/font-weights' as *;
@use 'properties/letter-spacings' as *;
@use 'properties/line-heights' as *;
@use 'properties/text-indents' as *;
@use 'properties/word-spacings' as *;

$typography-values: (
  font-families: $families,
  font-size: $sizes,
  font-style: (normal, italic, oblique),
  font-variant: (small-caps, all-small-caps, petite-caps, all-petite-caps, unicase, titling-caps),
  font-weight: $weights,
  line-height: $heights,
  letter-spacing: $l-spacings,
  text-align: (start, end, left, right, center, justify, match-parent),
  text-indent: $indents,
  text-transform: (none, capitalize, uppercase, lowercase, full-width, full-size-kana),
  word-spacing: $w-spacings,
);

/// GENERATE UTILITY CLASS NAMES
/// ----------
/// the following code generates classes such as `.txt-align--center` or `.ln-hgt--tall`.
/// the classes will only be generated if the corresponding property is set to `true` in
/// the $font-utilities map.
@each $property, $flag in $utilities {
  @if $flag {
    @include m.gen-utils($property, map.get($typography-values, $property));
  }
}

/// GENERATE RESPONSIVE CLASS NAMES
/// ----------
/// the following code generates classes such as `.font-size:lead@sm`, or `.font-weight:heavy@xl`.
/// the classes will only be generated if the corresponding property is set to 'true' in
/// the $font-responsive map.
@each $key, $value in config.$breakpoints-map {
  @include config.break($key) {
    @each $property, $flag in $responsive {
      @if $flag {
        @include m.gen-responsive($key, $property, map.get($typography-values, $property));
      }
    }
  }
}

/// MODULE-LEVEL MIXINS
/// ----------
/// These mixins combine behaviour of several/many of the different properties that have been defined so far.

/// TEXT FORMAT
@mixin text-format(
  $alignment: start,
  $family: sans-serif,
  $line-height: tall,
  $size: base,
  $weight: base,
) {
  font-family: get-font-family($family);
  font-size: get-font-size($size);
  font-weight: get-font-weight($weight);
  line-height: get-line-height($line-height);
  text-align: $alignment;
}

/// TEXT ALTER
@mixin text-alter(
  $indent: none,
  $letter-spacing: base,
  $transform: none,
  $variant: normal,
  $word-spacing: base,
  $optimise: false,
) {
  font-variant: $variant;
  letter-spacing: get-letter-spacing($letter-spacing);
  text-indent: get-text-indent($indent);
  text-transform: $transform;
  word-spacing: get-word-spacing($word-spacing);
  // set some recommended values that aren't browser defaults.
  // In some cases, these won't have any affect as they are not well supported,
  // and the end-user can always override them in their stylesheets anyway...
  @if $optimise {
    font-kerning: normal;
    overflow-wrap: break-word;
  }
}

.text-body {
  @include text-format($line-height: tall);
  max-width: 70ch;
}

.text-lead {
  @include text-format($size: lead, $weight: x-light);
  // this next line is just here for demo purposes, this kind of thing should live in the layout module
  max-width: 62ch;
}

.text-subheading {
  @include text-format($family: serif, $size: sub-heading, $line-height: tight);
}

.text-heading {
  @include text-format($family: serif, $size: heading, $line-height: tight, $weight: heavy);
}

// ALL OF THIS FOLLOWING CODE SHOULD ONE DAY LIVE IN AN 'Elements' MODULE, it's here for now
// as a proof of concept/demo kind of thing.
h1 {
  @extend .text-heading;
  // this next line is just here for demo purposes, this kind of thing should live in the layout module
  max-width: 15ch;
}

h2, h3 {
  @extend .text-subheading;
  font-weight: get-font-weight(heavy);
  // this next line is just here for demo purposes, this kind of thing should live in the layout module
  max-width: 25ch;
}
h3 {
  font-weight: get-font-weight(base);
}

p:not([class]) {
  @extend .text-body;
}

