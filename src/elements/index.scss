@use '../config' as *;
@use '../color/' as clr;
@use '../layout/' as lyt;
@use '../pseudo/' as ps;
@use '../reset';
@use '../typography/' as typ;

// all styles/opinions will be scoped under the class name or id `finch`. This is
// configurable though, the end-user can set whatever base-selector they like :).
$base-class: "finch" !default;
$base-id: "finch" !default;


.#{$base-class},
##{$base-id} {
  /// STRUCTURE
  /// ----------
  /// #1 - set a default padding on the containing element, this just keeps things away from the edge of the screen.
  ///
  /*-- #1 --*/
  @include lyt.padding(x-large);
  @include break(md, down) {
    @include lyt.padding(base);
  }

  /// MISC
  /// ----------
  /// #1 - style the selected text.
  /// #2 - style 'contenteditable' elements.
  /// #3 - style `<hr>` elements.
  ///
  ::selection {
    /*-- #1 --*/
    background-color: clr.use(main, 500, .99);
    color: clr.use(light);
  }

  *[contenteditable] {
    /*-- #2 --*/
    // style the 'default' state of `contenteditable` elements:
    @include lyt.border($style: dashed, $color: clr.use(dark, $alpha: .1));
    @include lyt.padding(base);
    transition: border-color .2s ease;
    // style the 'active' state of `contenteditable` elements:
    &:hover, &:focus {
      border-color: clr.use(orange, $alpha: .5);
      outline-color: clr.use(orange, 700, .5);
      outline-width: .25rem;
      outline-offset: .25rem;
    }
  }

  hr {
    /*-- #3 --*/
    border: none;
    @include lyt.border($width: thin, $color: clr.use(dark, 700), $sides: bottom);
    @include lyt.margin(x-large, y, true);
  }

  /// TYPOGRAPHY
  /// ----------
  /// #1 - Set global font styles.
  /// #2 - Set heading style variations.
  /// #3 - Set the vertical flow for different elements.
  /// 
  * {
    /*-- #1 --*/
    @include typ.format;
  }

  h1, h2, h3, h4, h5, h6 {
    /*-- #2 --*/
    @include typ.format($family: serif, $weight: heavy, $line-height: base);
  }

  h1 {
    /*-- #2 --*/
    @include typ.font-size(heading);
    @include typ.underline;
    /*-- #3 --*/
    + * { margin-block-start: lyt.get-margin(x-large); }
  }
  h2, h3 {
    /*-- #2 --*/
    @include typ.font-size(sub-heading);
    /*-- #3 --*/
    + * { margin-block-start: lyt.get-margin(large); }
  }
  /*-- #2 --*/
  h3 { @include typ.font-weight(thick); }
  
  /*-- #3 --*/
  p + * { margin-block-start: lyt.get-margin(base); }

  /// LINKS
  /// ----------
  /// #1 - Set basic link styles.
  /// #2 - Set transitions for different link states.
  /// #3 - Style links that don't go anywhere.
  /// #4 - Style the disabled state.
  /// #5 - Style the hover state.
  /// #6 - Style the focus state.
  a {
    /*-- #1 --*/
    @include typ.format($family: serif, $color: clr.use(main));
    /*-- #2 --*/
    transition: color .2s ease, background-color .2s ease;
    /*-- #3 --*/
    &:not([href]) { @include typ.strike; }

    &:disabled,
    &.disabled {
      /*-- #4 --*/
      color: clr.use(main, 700);
      pointer-events: none;
    }

    /*-- #5 --*/
    @include ps.hover { color: clr.use(main, 200); }
    @include ps.focus {
      /*-- #6 --*/
      outline: none;
      color: clr.use(main, 200);
      background-color: clr.use(main, 700, .1);
    }
  }

  /// BLOCKQUOTES
  /// ----------
  /// #1 - Style the layout of a blockquote.
  /// #2 - Style the text of a blockquote.
  /// #3 - Style the citation of a blockquote.
  ///
  blockquote {
    /*-- #1 --*/
    + * { margin-block-start: lyt.get-margin(base); }
    @include lyt.padding(small);
    padding-inline-start: lyt.get-padding(large);
    @include lyt.border($color: clr.use(main), $sides: left);

    /*-- #2 --*/
    @include typ.format($style: italic, $weight: light);
    > *:not(cite) {
      @include typ.format($style: italic, $weight: light);
    }
  }

  cite {
    /*-- #3 --*/
    // `<cite>` are `display: inline;` by default. Setting `display: block;` ensures that they
    // sit on their own line, rather than running on from the quote text, which is the effect
    // we want in this case.
    display: block;
    padding-inline-start: 1rem;
    @include typ.font-family(serif);
    @include ps.before('-') {
      left: 0;
    }
  }

  /// LISTS
  /// ----------
  /// #1 - Set the vertical flow of list elements.
  /// #2 - Style the markers.
  ///
  /// @todo - Add `<dl>`
  /// @todo - Add `datalist` attr if the dropdown is stylable?
  ///

  /*-- #1 --*/
  :is(ul, ol) + * { margin-block-start: lyt.get-margin(large); }

  ul:not([role="list"]) {
    /*-- #2 --*/
    // style the "default" marker as yellow.
    list-style-type: none;
    li {
      // the padding on the list item makes room for the markers.
      padding-inline-start: 2rem;
      @include ps.before('') {
        left: 0;
        top: 1rem;
        width: .5rem;
        height: .5rem;
        border-radius: 50%;
        background-color: clr.use(main);
        transform: translateY(-50%);
      };
    }
  }

  ol:not([role="list"]) {
    list-style-type: none;
    counter-reset: orderedlist;
    li {
      padding-inline-start: 2rem;
      counter-increment: orderedlist;
      $bullet: counter(orderedlist) ".";
      @include ps.before($bullet) {
        left: 0;
        color: clr.use(main);
      }
    }
  }

  // provide option for all colors of marker thourgh a data-attr api.
  ol:not([role="list"]) {
    @each $name, $value in clr.$color-palette {
      &[data-bullet-color='#{"" + $name}'] {
        li::before {
          color: clr.use($name); /* #2.b */
        }
      }
    }
  }
  ul:not([role="list"]) {
    @each $name, $value in clr.$color-palette {
      &[data-bullet-color='#{"" + $name}'] {
        li::before {
          background-color: clr.use($name); /* #2.b */
        }
      }
    }
  }

  /// FIGURES
  /// ----------
  ///

  /// CODE BLOCKS
  /// ----------
  ///

  /// MARKS
  /// ----------
  /// #1 - set default `<mark>` background color as yellow.
  /// #2 - provide options for all other colors.
  ///
  mark {
    /*-- #1 --*/
    background-color: clr.use(yellow, 700, .99);
    /*-- #2 --*/
    @each $name, $value in clr.$color-palette {
      &[data-bg-color='#{"" + $name}'] {
        background-color: clr.use($name, 700, .99);
      }
    }
  }

  /// FORMS
  /// ----------
  /// Forms will have their own module, so no styles here for now.
  ///


  /// INPUTS/FIELDSETS + their text elements
  /// ----------
  /// Inputs and the like are included in the `form` module.
  // input {
  //   /*-- #1 --*/
  //   transition: border-color .2s ease, outline-color .2s ease;
  //   /*-- #2 --*/
  //   &:is(:invalid, .invalid, .error) {
  //     border-color: clr.use(invalid);
  //     &:focus {
  //       outline-color: rgba(clr.use(invalid), .4);
  //     }
  //   }

  //   /*-- #2 --*/
  //   &:is(:valid, .valid, .success) {
  //     border-color: clr.use(valid, 700);
  //     &:focus {
  //       outline-color: rgba(clr.use(valid, 700), .4);
  //     }
  //   }
  // }
  

  /// BUTTONS
  /// ----------
  /// #1 - [opinion] all buttons should have center-aligned text.
  /// #2 - [opinion] all buttons should have a 'pointer' cursor.
  /// #3 - [opinion] all buttons should have a transition on their background and color.
  ///
  :is(button, [role="button"], [type="button"]) {
    /*-- #1 --*/
    text-align: center;
    /*-- #2 --*/
    cursor: pointer;
    /*-- #3 --*/
    transition: background .2s ease, color .2s ease;
  }

  /// ** INTERACTIVE ELEMENTS **
  ///
  
  /// DETAILS
  /// ----------
  /// #1 - [opinion] details should have a faint border.
  /// #2 - space the elements within a `details`.
  /// #3 - style the [open] `details`.
  /// #4 - style the `details` content.
  ///
  details {
    /*-- #1 --*/
    @include lyt.border($color: clr.use(main, 700, .5));
    /*-- #2 --*/
    @include lyt.padding(base);
    
    /*-- #3 --*/
    &[open] {
      summary {
        /*-- #2 --*/
        padding-bottom: lyt.get-padding(small);
        @include lyt.border($color: clr.use(dark, 800, .4), $sides: bottom);
        
        & + * {
          /*-- #2 --*/
          margin-top: lyt.get-margin(small);
        }
      }
    }

    summary {
      /*-- #4 --*/
      @include typ.font-family(serif);
      & + * {
        @include typ.font-weight(light);
      }

      &:focus {
        outline: none;
        background-color: clr.use(dark, 900, .8);
      }
    }

    // provide colour options for the border:
    @each $name, $value in clr.$color-palette {
      &[data-border-color='#{"" + $name}'] {
        border-color: clr.use($name, 700, .99);
      }
    }

    // provide shadow option:
    &[data-shadow] {
      box-shadow: 0 0 .25rem .25rem clr.use(dark, 400, .24);
    }
  }

  /// DIALOG
  /// ----------
  ///

  /// MENU
  /// ----------
  ///

  /// SUMMARY
  /// ----------
  ///

}
