@use '../color/' as clr;
@use '../layout/' as lyt;
@use '../pseudo/' as ps;
@use '../reset';
@use '../typography/' as typ;

// all styles/opinions will be scoped under the class name or id `finch`. This is
// configurable though, the end-user can set whatever base-selector they like :).
$base-class: "finch" !default;
$base-id: "finch" !default;


.#{$base-class},
##{$base-id} {
  /// STRUCTURE
  /// ----------
  /// #1 - set a default padding on the containing element, this just keeps things away from the edge of the screen.
  ///
  /*-- #1 --*/
  @include lyt.padding(x-large);

  /// MISC
  /// ----------
  /// #1 - style the selected text.
  /// #2 - style 'contenteditable' elements.
  /// #3 - style `<hr>` elements.
  ///
  ::selection {
    /*-- #1 --*/
    background-color: rgba(clr.use(main, 500), .99);
    color: clr.use(light);
  }

  *[contenteditable] {
    /*-- #2 --*/
    // style the 'default' state of `contenteditable` elements:
    @include lyt.border($style: dashed, $color: rgba(clr.use(dark), .1));
    @include lyt.padding(base);
    transition: border-color .2s ease;
    // style the 'active' state of `contenteditable` elements:
    &:hover, &:focus {
      border-color: rgba(clr.use(orange), .5);
      outline-color: rgba(clr.use(orange, 700), .5);
      outline-width: .25rem;
      outline-offset: .25rem;
    }
  }

  hr {
    /*-- #3 --*/
    border: none;
    @include lyt.border($width: thin, $color: clr.use(dark, 700), $sides: bottom);
    @include lyt.margin(x-large, y, true);
  }

  /// TYPOGRAPHY
  /// ----------
  /// #1 - Set global font styles.
  /// #2 - Set heading style variations.
  /// #3 - Set the vertical flow for different elements.
  /// 
  * {
    @include typ.format; /* #1 */
  }

  h1, h2, h3, h4, h5, h6 {
    @include typ.format($family: serif, $weight: heavy, $line-height: base); /* #2 */
  }

  h1 {
    @include typ.font-size(heading); /* #2 */
    + * { margin-block-start: lyt.get-margin(x-large); } /* #3 */
  }
  h2, h3 {
    @include typ.font-size(sub-heading); /* #2 */
    + * { margin-block-start: lyt.get-margin(large); } /* #3 */
  }
  h3 { @include typ.font-weight(thick); } /* #2 */
  
  p + * { margin-block-start: lyt.get-margin(base); } /* #3 */

  /// LINKS
  /// ----------
  /// #1 - Set basic link styles.
  /// #2 - Set transitions for different link states.
  /// #3 - Style links that don't go anywhere.
  /// #4 - Style the disabled state.
  /// #5 - Style the hover state.
  /// #6 - Style the focus state.
  a {
    @include typ.format($family: serif, $color: clr.use(main)); /* #1 */
    transition: color .2s ease, background-color .2s ease; /* #2 */
    &:not([href]) { @include typ.strike; } /* #3 */

    &:disabled,
    &.disabled {
      /*-- #4 --*/
      color: clr.use(main, 700);
      pointer-events: none;
    }

    @include ps.hover { color: clr.use(main, 200); } /* #5 */
    @include ps.focus {
      /*-- #6 --*/
      outline: none;
      color: clr.use(main, 200);
      background-color: rgba(clr.use(main, 700), .1);
    }
  }

  /// BLOCKQUOTES
  /// ----------
  /// #1 - Style the layout of a blockquote.
  /// #2 - Style the text of a blockquote.
  /// #3 - Style the citation of a blockquote.
  ///
  blockquote {
    /*-- #1 --*/
    + * { margin-block-start: lyt.get-margin(small); }
    @include lyt.padding(small);
    padding-inline-start: lyt.get-padding(large);
    @include lyt.border($color: clr.use(main), $sides: left);

    /*-- #2 --*/
    @include typ.format($style: italic, $weight: light);
    > *:not(cite) {
      @include typ.format($style: italic, $weight: light);
    }
  }

  cite {
    /*-- #3 --*/
    // `<cite>` are `display: inline;` by default. Setting `display: block;` ensures that they
    // sit on their own line, rather than running on from the quote text, which is the effect
    // we want in this case.
    display: block;
    padding-inline-start: 1rem;
    @include typ.font-family(serif);
    @include ps.before('-') {
      left: 0;
    }
  }

  /// LISTS
  /// ----------
  /// #1 - Set the vertical flow of list elements.
  /// #2 - Style the markers.
  ///

  /*-- #1 --*/
  ul + *, ol + * { margin-block-start: lyt.get-margin(large); } /* #1 */

  ul:not([role="list"]) {
    /*-- #2 --*/
    // style the "default" marker as yellow.
    list-style-type: none;
    li {
      // the padding on the list item makes room for the markers.
      padding-inline-start: 2rem;
      // `\2022` is the unicode "bullet" character.
      @include ps.before('\2022') {
        left: 0;
        color: clr.use(main);
      };
    }
  }

  ol:not([role="list"]) {
    list-style-type: none;
    counter-reset: orderedlist;
    li {
      padding-inline-start: 2rem;
      counter-increment: orderedlist;
      $bullet: counter(orderedlist) ".";
      @include ps.before($bullet) {
        left: 0;
        color: clr.use(main);
      }
    }
  }

  // provide option for all colors of marker thourgh a data-attr api.
  ul:not([role="list"]), ol:not([role="list"]) {
    @each $name, $value in clr.$color-palette {
      &[data-bullet-color='#{"" + $name}'] {
        li::before {
          color: clr.use($name); /* #2.b */
        }
      }
    }
  }

  /// FIGURES
  /// ----------
  ///

  /// CODE BLOCKS
  /// ----------
  ///

  /// MARKS
  /// ----------
  /// #1 - set default `<mark>` background color as yellow.
  /// #2 - provide options for all other colors.
  mark {
    /*-- #1 --*/
    background-color: rgba(clr.use(yellow, 700), .99);
    /*-- #2 --*/
    @each $name, $value in clr.$color-palette {
      &[data-bg-color='#{"" + $name}'] {
        background-color: rgba(clr.use($name, 700), .99);
      }
    }
  }

  /// FORMS
  /// ----------
  ///
  form:invalid {

  }

  /// INPUTS/FIELDSETS + their text elements
  /// ----------
  /// The text elements referred to in the title of this section are any text based content that relates to
  /// any input element. This includes `<label>` and `<legend>`.
  ///
  /// #1 - style input errors.
  ///

  /*-- #1 --*/
  input:invalid,
  input.invalid,
  input.error {

  }
  

  /// BUTTONS
  /// ----------
  ///

  /// ** INTERACTIVE ELEMENTS **
  ///
  
  /// DETAILS
  /// ----------
  ///

  /// DIALOG
  /// ----------
  ///

  /// MENU
  /// ----------
  ///

  /// SUMMARY
  /// ----------
  ///

}
