@use 'sass:map';
@use '_functions' as func;

/// SIZES
/// ----------
///
$size-base: 1rem !default;
$interval-base: 1 !default;

/// Custom Finch Scale:
$finch-size-scale: (
  100: $size-base * .4,   // .4rem
  200: $size-base * .6,   // .6rem
  300: $size-base * .8,   // .8rem
  400: $size-base,        // 1rem
  500: $size-base * 1.2,  // 1.2rem
  600: $size-base * 1.4,  // 1.4rem
  700: $size-base * 1.8,  // 1.8rem
  800: $size-base * 2,    // 2rem
  900: $size-base * 3,    // 3rem
  1000: $size-base * 4,   // 4rem
);

$finch-size-scale--intervals: (
  100: $interval-base * .4,
  200: $interval-base * .6, 
  300: $interval-base * .8,
  400: $interval-base,
  500: $interval-base * 1.2,
  600: $interval-base * 1.4,
  700: $interval-base * 1.8,
  800: $interval-base * 2,
  900: $interval-base * 3,
  1000: $interval-base * 4,
);

/// MINOR THIRDS
/// ----------
/// 100: 0.579rem, 200: 0.694rem, 300: 0.833rem, 400: 1rem, 500: 1.2rem,
/// 600: 1.44rem, 700: 1.728rem, 800: 2.074rem, 900: 2.488rem, 1000: 2.986rem
$minor-thirds--intervals: func.create-scale($base: $interval-base, $ratio: 1.2);
$minor-thirds: func.create-scale($base: $size-base, $ratio: 1.2);

/// MAJOR THIRDS
/// ----------
/// 100: 0.512rem, 200: 0.64rem, 300: 0.8rem, 400: 1rem, 500: 1.25rem,
/// 600: 1.563rem, 700: 1.953rem, 800: 2.441rem, 900: 3.052rem, 1000: 3.815rem
$major-thirds--intervals: func.create-scale($base: $interval-base, $ratio: 1.25);
$major-thirds: func.create-scale($base: $size-base, $ratio: 1.25);

/// PERFECT FOURTHS
/// ----------
/// 100: 0.422rem, 200: 0.563rem, 300: 0.75rem, 400: 1rem, 500: 1.333rem,
/// 600: 1.777rem, 700: 2.369rem, 800: 3.157rem, 900: 4.209rem, 1000: 5.61rem
$perfect-fourths--intervals: func.create-scale($base: $interval-base, $ratio: 1.333);
$perfect-fourths: func.create-scale($base: $size-base, $ratio: 1.333);

/// GOLDEN RATIO
/// ----------
/// 100: 0.236rem, 200: 0.382rem, 300: 0.618rem, 400: 1rem, 500: 1.618rem,
/// 600: 2.618rem, 700: 4.236rem, 800: 6.854rem, 900: 11.089rem, 1000: 17.942rem
$golden-ratio--intervals: func.create-scale($base: $interval-base, $ratio: 1.618);
$golden-ratio: func.create-scale($base: $size-base, $ratio: 1.618);

$scales: (
  golden-ratio: $golden-ratio,
  major-thirds: $major-thirds,
  minor-thirds: $minor-thirds,
  perfect-fourths: $perfect-fourths,
  root: $finch-size-scale,
);

$intervals: (
  golden-ratio: $golden-ratio--intervals,
  major-thirds: $major-thirds--intervals,
  minor-thirds: $minor-thirds--intervals,
  perfect-fourths: $perfect-fourths--intervals,
  root: $finch-size-scale--intervals,
);

$use-scale: root !default;
$set-size-scale: () !default;
$set-interval-scale: () !default;
$size-scale: map.merge(map.get($scales, $use-scale), $set-size-scale);
$interval-scale: map.merge(map.get($intervals, $use-scale), $set-interval-scale);

$finch-atomic-scale: (
  100: -.25rem,
  200: -.125rem,
  300: -1px,
  400: 0,
  500: 1px,
  600: .125rem,
  700: .25rem,
  800: .4rem,
  900: .65rem,
  1000: 1rem,
);

$set-atomic-scale: () !default;
$atomic-scale: map.merge($finch-atomic-scale, $set-size-scale);

/// GLOBAL VALUES
$global-values: (initial, inherit, unset);
$writing-mode: horizontal-tb;

/// BREAKPOINTS
$breakpoint-x-small: 0 !default;
$breakpoint-small: 576px !default;
$breakpoint-medium: 768px !default;
$breakpoint-large: 992px !default;
$breakpoint-x-large: 1200px !default;

$finch-breakpoints: (
  xs: $breakpoint-x-small,
  sm: $breakpoint-small,
  md: $breakpoint-medium,
  lg: $breakpoint-large,
  xl: $breakpoint-x-large,
);

$set-breakpoints: () !default;
$breakpoints-map: map.merge($finch-breakpoints, $set-breakpoints);

@mixin break($breakpoint, $dir: up) {
  $width: map.get($breakpoints-map, $breakpoint);
  @if $dir == up {
    @media screen and (min-width: $width) {
      @content;
    }
  }

  @else if $dir == down {
    @media screen and (max-width: $width - 1) {
      @content;
    }
  }

  @else {
    @error "Unknown direction #{$dir}.";
  }
}

@mixin break-only($breakpoint) {
  $width: map.get($breakpoints-map, $breakpoint);
  $next-breakpoint: func.map-get-next($breakpoints-map, $breakpoint);

  @media screen and (min-width: $width) and (max-width: $next-breakpoint - 1) {
    @content;
  }
}