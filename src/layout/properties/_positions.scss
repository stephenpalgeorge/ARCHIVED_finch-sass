@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use '../../config';

/// UTILITY MIXINS
/// ----------

/// POS
/// @param $type one of the keyword values for the `position` property as defined in the css spec.
/// @param $distance {Length} the value that each specified side should recieve.
/// @param $sides {List} the sides that the `$distance` should be applied to.
/// ----------
/// this mixin is intended for setting a consistent value on 2 or more sides.
/// If the styles require different values on multiple sides, normal css should be written
/// as there's no real benefit to writing `@include pos($type: absolute, $top: 2rem, $right: 5rem)`
/// instead of `position: absolute; top: 2rem; right: 5rem` within a selector.
///
@mixin pos($type: static, $distance, $sides: null) {
  position: $type;
  @if meta.type-of($sides) == list {
    @each $side in $sides {
      #{$side}: $distance;
    }
  } @else {
    // if `$sides` hasn't been set, apply the `$distance` equally to *all* sides
    // using the `inset` property, or explicitly on each side if `inset` is not supported.
    inset: $distance;
    @supports not (inset: 0) {
      top: $distance;
      right: $distance;
      bottom: $distance;
      left: $distance;
    }
  }
}

/// In some cases, elements may need positioning removed. For example,
/// if an absolutely positioned element is set with `top: 0` on desktop,
/// but `bottom: 0` on mobile, then the mobile version should `unset` the
/// top value, and vice-versa.
/// The pos-reset mixin provides a quick way of doing just that, by unsetting
/// all position related values. As long as the new, desired values are declared
/// *after* the pos-reset declaration, they will be applied as expected thanks
/// to the cascade.
@mixin pos-reset() {
  top: unset;
  right: unset;
  bottom: unset;
  left: unset;
}

/// ABSOLUTE
/// a shorthand for the `pos` mixin with `$type` set to `absolute`
@mixin absolute($distance, $sides: null, $reset: false) {
  @if $reset { @include pos-reset; }
  @include pos($type: absolute, $distance: $distance, $sides: $sides);
}

/// FIXED
/// a shorthand for the `pos` mixin with `$type` set to `fixed`
@mixin fixed($distance, $sides: null, $reset: false) {
  @if $reset { @include pos-reset; }
  @include pos($type: fixed, $distance: $distance, $sides: $sides);
}

/// STICKY
/// a shorthand for the `pos` mixin with `$type` set to `sticky`
@mixin sticky($distance, $sides: null, $reset: false) {
  @if $reset { @include pos-reset; }
  @include pos($type: sticky, $distance: $distance, $sides: $sides);
}
