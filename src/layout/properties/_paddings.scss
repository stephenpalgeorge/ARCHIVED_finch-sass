@use 'sass:map';
@use 'sass:list';
@use '../../config';

$finch-paddings: (
  none: 0,
  small: map.get(config.$size-scale, 200),
  base: map.get(config.$size-scale, 400),
  large: map.get(config.$size-scale, 700),
  x-large: map.get(config.$size-scale, 1000),
);
$set-paddings: () !default;
$padding-sizes: map.merge($finch-paddings, $set-paddings);

/// Getter function
/// @param $key one of the keys of the `$padding-sizes` map.
/// @return {Length | null} the `padding` declaration associated with the given `$key`, or `null` if the `$key` is not found.
@function get-padding($key) {
  // immediately return the given value if it is a 'global' value:
  @if list.index(config.$global-values, $key) {
    @return $key;
  }
  // otherwise, try and find the value in the relevant map, or handle the error case below:
  $value: map.get($padding-sizes, $key);
  @if $value {
    @return $value;
  }

  @warn 'No padding found for "#{$key}"';
  @return null;
}

/// UTILITY MIXINS
/// ----------

/// PADDING
/// @param $key one of the keys of the `$padding-sizes` map.
/// @param $axis one of `x|y|null`, determines where the padding should be set. (If `null`, padding will be applied to all sides).
///
@mixin padding($key, $axis: null, $important: false) {
  // X-AXIS
  // normally, the x-axis will correspond to padding-inline,
  // however for writing modes that are vertical, the x-axis
  // (left and right) will correspond to padding-block.
  @if $axis == x or $axis == 'x' {
    @if config.$writing-mode == vertical-rl or config.$writing-mode == vertical-lr {
      @if $important { padding-block: get-padding($key) !important; }
      @else { padding-block: get-padding($key); }
    }
    @else {
      @if $important { padding-inline: get-padding($key) !important; }
      @else { padding-inline: get-padding($key); }
    }
    // browsers that don't support logical properties get a
    // fallback of padding-left, padding-right.
    // https://caniuse.com/?search=padding-inline
    @supports not (padding-inline: 0) {
      @if $important {
        padding-left: get-padding($key) !important;
        padding-right: get-padding($key) !important;
      } @else {
        padding-left: get-padding($key);
        padding-right: get-padding($key);
      }
    }
  }

  // Y-AXIS
  // normally, the y-axis will correspond to padding-block,
  // however for writing modes that are vertical, the y-axis
  // (top and bottom) will correspond to padding-inline.
  @else if $axis == y or $axis == 'y' {
    @if config.$writing-mode == vertical-rl or config.$writing-mode == vertical-lr {
      @if $important { padding-inline: get-padding($key) !important; }
      @else { padding-inline: get-padding($key); }
    }
    @else {
      @if $important { padding-block: get-padding($key) !important; }
      @else { padding-block: get-padding($key); }
    }
    // browsers that don't support logical properties get a
    // fallback of padding-top, padding-bottom.
    // https://caniuse.com/?search=padding-block
    @supports not (padding-block: 0) {
      @if $important {
        padding-top: get-padding($key) !important;
        padding-bottom: get-padding($key) !important;
      } @else {
        padding-top: get-padding($key);
        padding-bottom: get-padding($key);
      }
    }
  }

  // If no `$axis` is provided, the padding is applied to all sides:
  @else {
    @if $important { padding: get-padding($key) !important; }
    @else { padding: get-padding($key); }
  }
}

/// PADDING LOGICAL
/// @param $key one of the keys of the `$padding-sizes` map.
/// @param $dir one of `inline|block` that determines where the padding should be set.
///
@mixin padding-logical($key, $dir: inline, $important: false) {
  @if list.index((inline, block), $dir) {
    @if $important { padding-#{$dir}: get-padding($key) !important; }
    @else { padding-#{$dir}: get-padding($key); }

    // some browsers (like `edge`) don't support the `padding-inline` shorthand
    // but do support the full `padding-inline-start` and `padding-inline-end` properties.
    // https://caniuse.com/?search=padding-inline
    @supports not (padding-inline: 0) {
      @if $important {
        padding-#{$dir}-start: get-padding($key) !important;
        padding-#{$dir}-end: get-padding($key) !important;
      } @else {
        padding-#{$dir}-start: get-padding($key);
        padding-#{$dir}-end: get-padding($key);
      }
    }
    // browsers that don't support logical properties at all get a sensible fallback.
    // https://caniuse.com/?search=padding-inline-start
    @supports not (padding-inline-start: 0) {
      @if $dir == inline {
        @if $important {
          padding-left: get-padding($key) !important;
          padding-right: get-padding($key) !important;
        } @else {
          padding-left: get-padding($key);
          padding-right: get-padding($key);
        }
      }
      @else if $dir == block {
        @if $important {
          padding-top: get-padding($key) !important;
          padding-bottom: get-padding($key) !important;
        } @else {
          padding-top: get-padding($key);
          padding-bottom: get-padding($key);
        }
      }
    }
  }
  @else {
    @warn 'Could not understand direction "#{$dir}"';
  }
}

/// PADDING INLINE
/// a shorthand for the `padding-logical` mixin with the `$dir` set to `inline`.
@mixin padding-inline($key, $important: false) {
  @include padding-logical($key: $key, $dir: inline, $important: $important);
}

/// PADDING BLOCK
/// a shorthand for the `padding-logical` mixin with the `$dir` set to `block`.
@mixin padding-block($key, $important: false) {
  @include padding-logical($key: $key, $dir: block, $important: $important);
}
